import argparse
import sys
def main():
    parser = argparse.ArgumentParser(
        description="Install and manage A/B slot system with shared partitions on ObsidianOS.",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    subparsers = parser.add_subparsers(dest="command", required=True)
    parser_status = subparsers.add_parser(
        "status", help="Show current active slot and system info."
    )
    parser_status.set_defaults(func=handle_status)

    parser_install = subparsers.add_parser(
        "install", help="Partition device and install system image."
    )
    parser_install.add_argument(
        "device", help="The target block device (e.g., /dev/sda)."
    )
    parser_install.add_argument("system_sfs", help="Path to the SquashFS system image. If you pass in an .mkobsfs file, it will download and run mkobsidiansfs.")
    parser_install.add_argument("--rootfs-size", default="5G", help="Size of the root partitions for slots a and b.")
    parser_install.add_argument("--etc-size", default="5G", help="Size of the shared etc partition.")
    parser_install.add_argument("--var-size", default="5G", help="Size of the shared var partition.")
    parser_install.add_argument("--esp-size", default="512M", help="Size of the ESP partitions for slots a and b.")
    parser_install.add_argument("--dual-boot", action="store_true", help="Setup a dual-boot configuration. (EXPERIMENTAL. USE AT YOUR OWN RISK.)")
    parser_install.add_argument("--use-f2fs", action="store_true", help="Setup an f2fs configuration. (EXPERIMENTAL. USE AT YOUR OWN RISK.)")
    parser_install.set_defaults(func=handle_install)
    parser_switchonce = subparsers.add_parser(
      "switch-once", help="Switch active boot slot to 'a' or 'b' once only."
    )
    parser_switchonce.add_argument(
      "slot", choices=["a", "b"], help="The slot to make active for once."
    )
    parser_switchonce.set_defaults(func=handle_switchonce)
    parser_diff = subparsers.add_parser(
        "slot-diff", help="Show diff between the two slots."
    )
    parser_diff.set_defaults(func=handle_slot_diff)
    
    parser_backup = subparsers.add_parser(
        "backup-slot", help="Create a backup of a specific slot."
    )
    parser_backup.add_argument(
        "slot", choices=["a", "b"], help="The slot to backup."
    )
    parser_backup.add_argument(
        "--backup-dir", help="Directory to store backups (default: /var/backups/obsidianctl/slot_X)."
    )
    parser_backup.add_argument(
        "--device", help="Drive (not partition) to backup (default: current drive)."
    )
    parser_backup.add_argument("--full-backup", action="store_true", help="Backup your ENTIRE SYSTEM. (EXPERIMENTAL. USE AT YOUR OWN RISK.)")
    parser_backup.set_defaults(func=handle_backup_slot)
    
    parser_rollback = subparsers.add_parser(
        "rollback-slot", help="Rollback a slot to a previous backup."
    )
    parser_rollback.add_argument(
        "slot", choices=["a", "b"], help="The slot to rollback."
    )
    parser_rollback.add_argument(
        "backup_path", help="Path to the backup file (.sfs)."
    )
    parser_rollback.add_argument(
        "--device", help="Drive (not partition) to rollback (default: current drive)."
    )
    parser_rollback.set_defaults(func=handle_rollback_slot)
    
    parser_health = subparsers.add_parser(
        "health-check", help="Check the health of both A/B slots."
    )
    parser_health.set_defaults(func=handle_health_check)
    
    parser_verify = subparsers.add_parser(
        "verify-integrity", help="Verify the integrity of a specific slot."
    )
    parser_verify.add_argument(
        "slot", choices=["a", "b"], help="The slot to verify."
    )
    parser_verify.set_defaults(func=handle_verify_integrity)
    
    parser_switch = subparsers.add_parser(
        "switch", help="Switch active boot slot to 'a' or 'b'."
    )
    parser_switch.add_argument(
        "slot", choices=["a", "b"], help="The slot to make active."
    )
    parser_switch.set_defaults(func=handle_switch)

    parser_update = subparsers.add_parser(
        "update", help="Update a slot with a new system image."
    )
    parser_update.add_argument(
        "slot", choices=["a", "b"], help="The slot to update."
    )
    parser_update.add_argument(
        "system_sfs", help="Path to the new SquashFS system image."
    )
    parser_update.add_argument(
        "--switch", action="store_true", help="Switch to the updated slot after updating."
    )
    parser_update.set_defaults(func=handle_update)

    parser_sync = subparsers.add_parser(
        "sync", help="Sync one slot to another."
    )
    parser_sync.add_argument(
        "slot", choices=["a", "b"], help="The slot to sync to."
    )
    parser_sync.set_defaults(func=handle_sync)

    parser_enter = subparsers.add_parser(
        "enter-slot", help="Chroot into a slot."
    )
    parser_enter.add_argument(
        "slot", choices=["a", "b"], help="The slot to chroot into."
    )
    parser_enter.add_argument(
        "--enable-networking", action="store_true", help="Enable networking in the chroot."
    )
    parser_enter.add_argument(
        "--mount-essentials", action="store_true", help="Mount /proc, /sys, and /dev."
    )
    parser_enter.add_argument(
        "--mount-home", action="store_true", help="Bind mount /home into the chroot."
    )
    parser_enter.add_argument(
        "--mount-root", action="store_true", help="Bind mount /root into the chroot."
    )
    parser_enter.set_defaults(func=handle_enter)
    parser_netupdate = subparsers.add_parser(
        "netupdate", help="Update a slot with the latest system image."
    )
    parser_netupdate.add_argument(
        "slot", choices=["a", "b"], help="The slot to update."
    )
    parser_netupdate.add_argument(
        "--break-system", action="store_true", help="Forcibly update even if not using an default system.sfs."
    )
    parser_netupdate.set_defaults(func=handle_netupdate)
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()
    args.func(args)

main()
